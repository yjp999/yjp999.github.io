<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yjp&#39;s tictoc</title>
  <subtitle>Do or Die.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-07T09:34:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cloudyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-[Container With Most Water]</title>
    <link href="http://yoursite.com/2016/11/01/leetcode-Container-With-Most-Water/"/>
    <id>http://yoursite.com/2016/11/01/leetcode-Container-With-Most-Water/</id>
    <published>2016-11-01T10:23:26.000Z</published>
    <updated>2016-11-07T09:34:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>这道算法题目非常有意思，秉着一题多解的思路和目标，我会分别给出算法时间复杂度分别为 $O(n^2)$ 和 $O(n)$ 的算法实现，并且在$O(n)$ 的基础上再优化，从而给出第三个解决方案，以节省程序运行时间。</p>
<hr>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Given n non-negative integers $a_1$, $a_2$, …, $a_n$, where each represents a point at coordinate $(i, a_i)$. n vertical lines are drawn such that the two endpoints of line $i$ is at $(i, a_i)$ and $(i, 0)$. Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<blockquote>
<p><strong>Note:</strong> You may not slant the container.</p>
</blockquote>
<h2 id="问题解读"><a href="#问题解读" class="headerlink" title="问题解读"></a>问题解读</h2><p>原问题的要求非常简单，假设我们把每条竖直线都当作是一个隔板，但是这些隔板的高度参差不齐，然后从中找出两条隔板，再加上对应的 $x$ 轴便可以形成一个容器，使得盛装的水量最大，即求的是找出两条竖线使得组成的容器容量达到最大。</p>
<blockquote>
<p><strong>Note:</strong></p>
<ul>
<li>盛水的容量取决于较短的那根隔板(竖线)和容器底部长度</li>
<li>这里的容量最大化可以等价转换为求面积最大化</li>
</ul>
</blockquote>
<h2 id="时间复杂度为-O-n-2-的算法"><a href="#时间复杂度为-O-n-2-的算法" class="headerlink" title="时间复杂度为 $O(n^2)$ 的算法"></a>时间复杂度为 $O(n^2)$ 的算法</h2><p>这种解法最符合人类的第一直觉，也是最容易想到的办法，但是时间复杂度较高，不过作为一种解决方法，我们有必要去说清楚这种解法的思路。代码实现使用两层for循环便可搞定，思路如下。</p>
<blockquote>
<p><strong>思路:</strong></p>
<ul>
<li>假设左边的隔板是第 $i$ 个，右边的隔板是第 $j$ 个</li>
<li>$i$ 从最左边第一个开始向右，$j$ 从 $i+1$开始，直到遇到n结束，算出每一次的面积，并与当前的最大面积比较，如果新算出的面积比当前的最大面积要大，就更新最大面积为最新面积，并继续循环</li>
<li>面积公式: $s = min(a_i,a_j)*(j-i)$ , ( $0&lt;i&lt;j&lt;n$ )</li>
</ul>
</blockquote>
<p>C++代码实现如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = height.size();</div><div class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123; <span class="comment">//特殊情况</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> area_max = <span class="number">0</span>;<span class="comment">//最大面积</span></div><div class="line">    <span class="keyword">int</span> area_curr = <span class="number">0</span>;<span class="comment">//当前面积</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="keyword">int</span> lheight = height[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</div><div class="line">            area_curr = min(lheight,height[j])*(j-i);</div><div class="line">            <span class="keyword">if</span>(area_curr &gt; area_max)&#123;</div><div class="line">                area_max = area_curr;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> area_max; <span class="comment">//返回结果，即最大面积值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="时间复杂度为-O-n-的算法"><a href="#时间复杂度为-O-n-的算法" class="headerlink" title="时间复杂度为 $O(n)$ 的算法"></a>时间复杂度为 $O(n)$ 的算法</h2><p> 既然时间复杂度为 $O(n)$，也就是说我们只需要扫描一次数组(元素为每个隔板的高 $height$ )，即可得到最大面积，那就只能是通过两个指针来实现，一个指针<strong>left</strong>从左往右扫描，另一个指针<strong>right</strong>从右往左扫描，当两个指针在中间某个位置相遇时，跳出循环，结束并返回当前的面积。</p>
<p>这里隐含着一个问题，那就是在什么条件下移动左指针left和右指针right？其实道理很简单，那就是当哪个指针对应的隔板高度比另一个指针对应的隔板低时，我们就移动哪个指针。比如，左指针left对应的 $height[left] &lt; height[right]$ ，下一步就移动left指针。可能有人会问了，那为何不移动对应隔板较高的指针呢？</p>
<blockquote>
<p><strong>Thinking:</strong> </p>
<p>无论移动的是左指针还是右指针，x轴对应的长度（容器底部长度）都<strong>必将减小</strong>。<em>假设我们每次移动的是高隔板对应的指针，那么最大面积将只会出现在两个指针第一次处于左右端的初始时候</em>，然而这里算出的最大面积并不一定是最大的，而且极有可能是错误的，因为下一个指针对应的隔板无论是比上一个指针对应的隔板大、相等、或是小，算出的面积都不会大于上一次算出的面积。造成这种情况的原因右两个：</p>
<ul>
<li>x轴变短</li>
<li>容器的高度取决于较低的那个隔板的高</li>
</ul>
</blockquote>
<p>这里用的其实是一种简易的贪心策略，即我们每次保留高隔板对应的指针不动，而是移动矮隔板对应的指针，那么下一次出现的隔板才有可能使得面积变大，这就取决于下一次出现的隔板对应的高度了。</p>
<p>对应的代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = height.size();</div><div class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">unsigned</span> max_area = <span class="number">0</span>;</div><div class="line">    <span class="keyword">size_t</span> left=<span class="number">0</span>, right = n<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</div><div class="line">        <span class="keyword">int</span> area_curr = min(height[left],height[right])*(right-left);</div><div class="line">        <span class="keyword">if</span>(area_curr &gt; max_area)&#123;</div><div class="line">            max_area = water;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(height[left] &lt; height[right])&#123;</div><div class="line">            left++;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            right--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max_area;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行时间截图如下：<br><img src="/2016/11/01/leetcode-Container-With-Most-Water/on_old.png" alt="the first run_time" title="the first run_time"></p>
<h2 id="进一步优化时间复杂度为-O-n-的算法"><a href="#进一步优化时间复杂度为-O-n-的算法" class="headerlink" title="进一步优化时间复杂度为 $O(n)$ 的算法"></a>进一步优化时间复杂度为 $O(n)$ 的算法</h2><p>在上面的算法基础之上，还可以稍微改动一下源码，便可以提高运行效率，节省时间。怎么做呢？</p>
<p>其实很简单，我们总是移动比较短的那根隔板对应的指针，为了尽快地找到比当前更大的面积，我们只需要保证下一次移动的指针所对应的隔板高度比之前的隔板高就行了，只有在这种情况下才有可能会比当前存储的面积要大，如果比之前的隔板还要低或者是等于之前的隔板，我们完全没有必要再去就算一遍此时新组成的容器对应的“面积”，每算一次乘法，就要耗费内存和CPU，这显然会降低速度。所以只需改一下判断条件就可以了，即如果当前的指针对应的隔板高度不大于之前的高度，就继续移动当前指针，直至找到一个比之前高的隔板才进行一次面积计算。核心代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(left &lt; right)&#123;</div><div class="line">    <span class="keyword">int</span> area_curr = min(height[left],height[right])*(right-left);</div><div class="line">    <span class="keyword">if</span>(area_curr &gt; area_max)&#123;</div><div class="line">        area_max = area_curr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(height[left] &lt; height[right])&#123;</div><div class="line">        <span class="keyword">int</span> left_value = height[left];</div><div class="line">        left++;</div><div class="line">        <span class="keyword">while</span>(height[left] &lt;= left_value &amp;&amp; left&lt;right)&#123;</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> right_value = height[right];</div><div class="line">        right--;</div><div class="line">        <span class="keyword">while</span>(height[right] &lt;= right_value &amp;&amp; left &lt; right)&#123;</div><div class="line">            right--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行时间截图如下：<br><img src="/2016/11/01/leetcode-Container-With-Most-Water/on_new.png" alt="the second run_time" title="the second run_time"></p>
<blockquote>
<p>和上一张图对比，可以发现运行时间从26ms减小到19ms，在仅仅只有49个测试案例中，减少了7ms，运行效率提高了26.9%。显然，优化后的效果还是非常明显的。</p>
</blockquote>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>刷算法题目，不能仅仅局限于一种方法，如果发现自己的方法在submit后也AC了，而不注重运行效率，那就等于是白刷了算法题。当发现自己的算法运行时间非常低效时，这个时候就应该去想想是不是还有更厉害的解法，而这也恰恰是我们真正提高的机会。</p>
<p>这道题目之所以单独拿出来写，是因为此题比较高效的解法在直觉上不是那么让人可以容易且快速地理解，并且要严谨地论证一番这里的贪心策略可以达到全局最优，而非求得的是局部最优。</p>
<p>如果您对这道题目有更好的想法，欢迎发邮件给我，也可以在评论区聊哦！</p>
<p><a href="https://yjp999.github.io/about/" target="_blank" rel="external"><strong>戳这儿发现我的邮箱</strong></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;这道算法题目非常有意思，秉着一题多解的思路和目标，我会分别给出算法时间复杂度分别为 $O(n^2)$ 和 $O(n)$ 的算法实现，并且在$
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>AES算法详解</title>
    <link href="http://yoursite.com/2016/10/11/aes/"/>
    <id>http://yoursite.com/2016/10/11/aes/</id>
    <published>2016-10-11T12:14:47.000Z</published>
    <updated>2016-10-11T13:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AES背景简介"><a href="#AES背景简介" class="headerlink" title="AES背景简介"></a>AES背景简介</h2><blockquote>
<p>高级加密标准，在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。              —— <a href="https://zh.wikipedia.org/wiki/高级加密标准" target="_blank" rel="external">维基百科</a></p>
</blockquote>
<p>曾经广泛使用的DES久负盛名，因为它的56位密钥过短（再加上8位校验码，也称为64位密钥），已被AES逐渐取代。在计算机的升级换代后，其运算速度大幅度提高， 破解DES密钥所需时间也将越来越短，于是在2000年10月，NIST（National Institute of Standords and Technology）选择了新的密码——高级加密标准AES，用于替代DES。</p>
<p>无论是之前的DES还是现在广泛使用的AES，都属于对称密码技术。对称密码技术和公开密钥密码技术（如著名的RSA）相比，加密密钥和解密密钥是相同的，其最大的优势就是速度快，一般用于<strong>大量数据</strong>的加密和解密。</p>
<h2 id="AES算法描述"><a href="#AES算法描述" class="headerlink" title="AES算法描述"></a>AES算法描述</h2><h3 id="原理详述"><a href="#原理详述" class="headerlink" title="原理详述"></a>原理详述</h3><p>AES算法是基于置换和代替的，置换是数据的重新排列，而代替是用一个单元数据替换另一个。AES使用了几种不同的技术来实现置换和替换，包括：</p>
<ul>
<li><strong>SubBytes</strong> ：字节代换，属于非线性变换，独立地将状态的每个字节进行。代换表（S-盒）是可逆的。状态矩阵按照下面的方式被映射成为一个新的字节：<blockquote>
<p>将该字节的高4位作为行值，低4位作为列值，得到S盒或逆S盒的对应元素作为输出。</p>
</blockquote>
</li>
</ul>
<p>例如输入字节0x12，取S盒的第0x01行第0x02列，得到0xC9。<br><img src="/2016/10/11/aes/aes_ByteSub.png" alt="ByteSub" title="ByteSub"></p>
<hr>
<ul>
<li><strong>ShiftRows</strong> ：行循环移位，在行循环移位变换中，状态阵列的后三行循环移位不同的偏移量。第0行不移动，第1行循环移位C1字节，第2行循环移位C2字节，第3行循环移位C3字节。偏移量C1、C2、C3与分组长度 $N_{b}$ 有关。如下表所示.</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">$N_b$</th>
<th style="text-align:center">C1</th>
<th style="text-align:center">C2</th>
<th style="text-align:center">C3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
</tr>
</tbody>
</table>
<p>行移位示意图：<br><img src="/2016/10/11/aes/aes_ShiftRows.png" alt="ShiftRows" title="ShiftRows"></p>
<hr>
<ul>
<li><strong>MixColumn</strong> ：列混合运算，该运算将状态(State)的列看作是有限域$GF(2^8)$上的多项式$a(x)$，与多项式$c(x)$相乘（在模（$x^4+1$）下）。运算公式如下：</li>
</ul>
<p>\begin{equation}<br>    b(x)=c(x)*a(x)  \mod (x^4+1)<br>\end{equation}</p>
<p>$$ \begin{bmatrix}<br>b_0 \\<br>b_1 \\<br>b_2 \\<br>b_3<br>\end{bmatrix} = \begin{bmatrix}<br>02&amp;03&amp;01&amp;01 \\<br>01&amp;02&amp;03&amp;01 \\<br>01&amp;01&amp;02&amp;03 \\<br>03&amp;01&amp;01&amp;02<br>\end{bmatrix} * \begin{bmatrix}<br>a_0\\<br>a_1\\<br>a_2\\<br>a_3<br>\end{bmatrix} $$</p>
<p>列混合运算示意图<br><img src="/2016/10/11/aes/aes_MixColumn.png" alt="MixColumn" title="MixColumn"></p>
<hr>
<ul>
<li><strong>AddRoundKey</strong> ：密钥加，它是将轮密钥简单地与状态进行逐比特异或。轮密钥由种子密钥通过密钥编排算法得到，轮密钥长度等于分组长度$N_b$。<br>密钥加运算示意图：<img src="/2016/10/11/aes/aes_AddRoundKey.png" alt="AddRoundKey" title="AddRoundKey">
</li>
</ul>
<h3 id="AES的密钥调度"><a href="#AES的密钥调度" class="headerlink" title="AES的密钥调度"></a>AES的密钥调度</h3><ul>
<li>密钥bit的总数 = 分组长度 x （轮数Round + 1）</li>
<li>当分组长度是128bit且轮数为10时，轮密钥长度为$128 * (10+1) = 1408 bit$</li>
<li>将初始密钥扩展成扩展密钥</li>
<li>轮密钥从扩展密钥中取，第1轮轮密钥取扩展密钥的前$N_b$个字，第2轮轮密钥取接下来的$N_b$个字，以此类推。<h3 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h3>AES密钥扩展图如下：<img src="/2016/10/11/aes/aes_KeyExtent.png" alt="KeyExtent" title="KeyExtent"></li>
<li>函数$T$由三部分组成：字循环移位、字节代换和轮常量异或。<ul>
<li>字循环移位：将1个字中的4个字节循环左移1个字节，即将输入字$[b_0, b_1 , b_2 , b_3]$变换为$[b_1, b_2 , b_3 , b_0]$。</li>
<li>字节代换：对字循环的结果使用S盒进行字节代换。</li>
<li>轮常量异或： 将前两步的结果同轮常量$Rcon[j]$进行异或，其中$j$表示轮数。</li>
</ul>
</li>
<li>轮常量是一个字，使用轮常量是为了防止不同轮中产生的轮密钥的对称性或相似性。</li>
</ul>
<h3 id="AES小结"><a href="#AES小结" class="headerlink" title="AES小结"></a>AES小结</h3><ul>
<li>AES的密钥长度和加密轮数列表如下：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">name</th>
<th style="text-align:center">密钥长度(32bit)$(N_k)$</th>
<th style="text-align:center">分组长度$N_b$</th>
<th style="text-align:center">加密轮数$(N_r)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AES-128</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">AES-192</td>
<td style="text-align:center">6</td>
<td style="text-align:center">4</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">AES-256</td>
<td style="text-align:center">8</td>
<td style="text-align:center">4</td>
<td style="text-align:center">14</td>
</tr>
</tbody>
</table>
<p>显然，AES是一个迭代的对称密钥分组的密码，它可以使用128,192和256位密钥，并且用128位（16字节）分组加密和解密数据。</p>
<ul>
<li>AES的加密/解密流程图<img src="/2016/10/11/aes/aes_flow.png" alt="The flow of encryption and decryption in AES" title="The flow of encryption and decryption in AES">
</li>
</ul>
<h2 id="AES的应用"><a href="#AES的应用" class="headerlink" title="AES的应用"></a>AES的应用</h2><p>研一第一学期我们院系除了别的课程，还开了两门课，现代密码学和网络信息安全，这两门课程我也都选择了，因为均有涉及到密码基础学，并且网络信息安全这门课的老师在上周留了一个project，写一个程序要求利用AES算法实现对文本文件的内容加解密，具体要求如下：</p>
<ul>
<li>从命令行接收3个参数</li>
<li>参数1=enc表示加密，参数1=dec表示解密</li>
<li>参数2为待加密、解密的文件名</li>
<li>参数3为密码</li>
</ul>
<p>为了快速实现这一功能，我直接调用了openssl库里的现有AES算法，整个程序的代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Linux: gcc -o encfile encfile.cpp -lcrypto</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4096</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"openssl/aes.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"libeay32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">16</span>];</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf2[<span class="number">16</span>];</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> aes_keybuf[<span class="number">32</span>];</div><div class="line">AES_KEY aeskey;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">char</span> inString[], <span class="keyword">int</span> inLen, <span class="keyword">char</span> passwd[], <span class="keyword">int</span> pwdLen)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j, len, nLoop, nRes;</div><div class="line">	<span class="keyword">char</span> enString[N];</div><div class="line"></div><div class="line">	<span class="comment">// 准备32字节(256位)的AES密码字节</span></div><div class="line">	<span class="built_in">memset</span>(aes_keybuf,<span class="number">0x90</span>,<span class="number">32</span>);</div><div class="line">	<span class="keyword">if</span>(pwdLen&lt;<span class="number">32</span>)&#123; len=pwdLen; &#125; <span class="keyword">else</span> &#123; len=<span class="number">32</span>;&#125;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) aes_keybuf[i]=passwd[i];</div><div class="line">	<span class="comment">// 输入字节串分组成16字节的块	</span></div><div class="line">	nLoop=inLen/<span class="number">16</span>; nRes = inLen%<span class="number">16</span>;</div><div class="line">	<span class="comment">// 加密输入的字节串</span></div><div class="line">	AES_set_encrypt_key(aes_keybuf,<span class="number">256</span>,&amp;aeskey);</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nLoop;i++)&#123;</div><div class="line">		<span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">16</span>);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) buf[j]=inString[i*<span class="number">16</span>+j];</div><div class="line">		AES_encrypt(buf,buf2,&amp;aeskey);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) enString[i*<span class="number">16</span>+j]=buf2[j];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(nRes&gt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">16</span>);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;nRes;j++) buf[j]=inString[i*<span class="number">16</span>+j];</div><div class="line">		AES_encrypt(buf,buf2,&amp;aeskey);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) enString[i*<span class="number">16</span>+j]=buf2[j];</div><div class="line">		<span class="comment">//puts("encrypt");</span></div><div class="line">	&#125;</div><div class="line">	enString[i*<span class="number">16</span>+j]=<span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"The encrypted string is:\n  %s "</span>, enString);</div><div class="line"></div><div class="line">	FILE *fp;</div><div class="line">	fp = fopen(<span class="string">"enc_string.txt"</span>,<span class="string">"w"</span>);</div><div class="line">	<span class="keyword">if</span>(fp==<span class="literal">NULL</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"Failure to open the file.\n"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		fwrite(enString, <span class="number">1</span>, <span class="keyword">sizeof</span>(enString), fp);</div><div class="line">	&#125;</div><div class="line">	fclose(fp);</div><div class="line">	<span class="comment">// return enString;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span> *enStr, <span class="keyword">int</span> inLen, <span class="keyword">char</span> passwd[], <span class="keyword">int</span> pwdLen)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> i,j, len, nLoop, nRes;</div><div class="line">	<span class="keyword">char</span> deString[N];</div><div class="line"></div><div class="line">	<span class="comment">// 准备32字节(256位)的AES密码字节</span></div><div class="line">	<span class="built_in">memset</span>(aes_keybuf,<span class="number">0x90</span>,<span class="number">32</span>);</div><div class="line">	<span class="keyword">if</span>(pwdLen&lt;<span class="number">32</span>)&#123; len=pwdLen; &#125; <span class="keyword">else</span> &#123; len=<span class="number">32</span>;&#125;</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++) aes_keybuf[i]=passwd[i];</div><div class="line">	<span class="comment">// 输入字节串分组成16字节的块	</span></div><div class="line">	nLoop=inLen/<span class="number">16</span>; nRes = inLen%<span class="number">16</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 密文串的解密	</span></div><div class="line">	AES_set_decrypt_key(aes_keybuf,<span class="number">256</span>,&amp;aeskey);</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nLoop;i++)&#123;</div><div class="line">		<span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">16</span>);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) buf[j]=enStr[i*<span class="number">16</span>+j];</div><div class="line">		AES_decrypt(buf,buf2,&amp;aeskey);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) deString[i*<span class="number">16</span>+j]=buf2[j];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(nRes&gt;<span class="number">0</span>)&#123;</div><div class="line">		<span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">16</span>);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) buf[j]=enStr[i*<span class="number">16</span>+j];</div><div class="line">		AES_decrypt(buf,buf2,&amp;aeskey);</div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++) deString[i*<span class="number">16</span>+j]=buf2[j];</div><div class="line">		<span class="comment">//puts("decrypt");</span></div><div class="line">	&#125;</div><div class="line">	deString[i*<span class="number">16</span>+nRes]=<span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"The decrypted string is:\n  %s "</span>, deString);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> *inString;</div><div class="line">	<span class="keyword">if</span>(argc != <span class="number">4</span>)&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"usage: %s &lt;purpose&gt; &lt;filename&gt; &lt;password&gt;\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">char</span> *purpose = argv[<span class="number">1</span>];</div><div class="line">	<span class="keyword">char</span> *filename = argv[<span class="number">2</span>];</div><div class="line">	<span class="keyword">char</span> *passwd = argv[<span class="number">3</span>];</div><div class="line"></div><div class="line">	<span class="keyword">struct</span> stat sb;</div><div class="line">	<span class="keyword">int</span> fd;</div><div class="line">	fd = open(filename, O_RDONLY);</div><div class="line">	fstat(fd, &amp;sb);</div><div class="line"></div><div class="line">	inString = (<span class="keyword">char</span> *)mmap(<span class="literal">NULL</span>, sb.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</div><div class="line">	close(fd);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="built_in">strcmp</span>(purpose, <span class="string">"enc"</span>) == <span class="number">0</span>)&#123;</div><div class="line">		encode(inString, <span class="built_in">strlen</span>(inString), passwd, <span class="built_in">strlen</span>(passwd));	</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(purpose, <span class="string">"dec"</span>) == <span class="number">0</span>)&#123;</div><div class="line">		decode(inString, <span class="built_in">strlen</span>(inString), passwd, <span class="built_in">strlen</span>(passwd));</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"the first argument must be 'enc' or 'dec' %s\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码的组织逻辑非常简单:</p>
<ul>
<li><strong>main</strong> 函数：接收命令行参数，并读取指定的文件内容。</li>
<li><strong>encode </strong>函数：对字符串利用openssl库里的aes算法加密（使用命令行参数3提供的密码）。</li>
<li><strong>decode</strong> 函数：对文本文件里的加密串进行解密，由密文转换成明文。</li>
</ul>
<p>需要注意的是，在Linux下面利用openssl库进行开发之前，必须保证已安装openssl，否则编译报错。<br>安装openssl的命令是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssl</div><div class="line">sudo apt-get install libssl-dev</div></pre></td></tr></table></figure></p>
<p>编译源码时，需要在后面添加<strong>-lcrypto</strong>，因为在链接时需要用到linux下的加密库。假设源代码文件名为encfile.cpp，编译命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -o encfile encfile.cpp -lcrypto</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在写这篇博客的过程中，花费了我很多精力和时间。其实在大三下阶段我就上过关于密码学的课程，但是由于当时逃课成瘾，课上几乎没怎么听，只是简单地应付了一下考试，所以关于密码学的相关知识基础非常薄弱，于是趁着现在事情不算多，又在现阶段重新选了密码学的课程，就把最近在密码学里面刚学到的的AES算法进行一个总结并实践之。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AES背景简介&quot;&gt;&lt;a href=&quot;#AES背景简介&quot; class=&quot;headerlink&quot; title=&quot;AES背景简介&quot;&gt;&lt;/a&gt;AES背景简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;高级加密标准，在密码学中又称Rijndael加密法，是美国联邦政府采用的一
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="c" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>日常随感之学习思路</title>
    <link href="http://yoursite.com/2016/09/29/blog-thinking/"/>
    <id>http://yoursite.com/2016/09/29/blog-thinking/</id>
    <published>2016-09-29T04:46:30.000Z</published>
    <updated>2016-11-07T13:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="懵"><a href="#懵" class="headerlink" title="懵"></a>懵</h2><p>今年的4月中旬，我在个人PC上面搭建好了Github Pages博客环境，大家也可以看到我的第一篇博客发表时间是在2016年4月21日，但是因为在6月份重新装了系统，之前的博客环境也就一直没有重新搭建，到了这几天，来到科大读研究生，突然意识到以后还是需要把许多idea以及读书笔记以博客的形式记录下来，这样可以加深理解，也是对知识的再回顾。</p>
<h2 id="思"><a href="#思" class="headerlink" title="思"></a>思</h2><p>因为是二次搭建，所以顺利了不少，但是还是遇到了一些小问题。主要记录两个比较重要的：</p>
<ul>
<li><p>如果换了电脑，之前所有的文章存档就不在了，下次更新博客，该怎么办？</p>
<p>  <code>可以将写博客的环境放在github上面存储，即使换了电脑，在新电脑上面直接git clone,就可以接着搞了。</code></p>
</li>
<li><p>如果你的repo里面某一个文件夹是另一个repo（别人已经发布的），那么该文件夹会以灰色的形式显示，无法打开，此时怎么办？</p>
<p>  <code>在本地仓库目录下，删除.git以及.gitignore（显示灰色的文件夹目录下面），再输入下面的命令,之后再重新提交。注意some-directory是你自己要清的文件夹</code></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached some-directory</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="悟"><a href="#悟" class="headerlink" title="悟"></a>悟</h2><p>解决问题的过程从来都不是一帆风顺的，这里面牵扯了很多，比如个人的学习能力、兴趣和耐心等等。假如我在搭建博客的过程中遇到一些挫折就放弃（讲真，中间差点就放弃Github Pages的搭建了），那我也不会遇到那些以前从未见过的问题，也不能更好地启发我去解决问题。</p>
<p>昨晚临睡前刷知乎的时候，看到一篇文章，个人觉得非常好，特别是针对走技术路线的同学来说，真的值得拜读，原文<a href="https://zhuanlan.zhihu.com/p/22625628" target="_blank" rel="external">点我</a>~</p>
<p>文章里面提到一个观点：“尽量读第一手资料”，我个人在成功搭建博客后，对这个观点无比赞同。可能在大部分人日常学习过程中，遇到一个问题会百度或者Google，这样可能对于解决当下的问题来说是最快的一种选择，但是这不利于我们系统地去看待原有的问题，假如直接去看官方文档，我们会有两种或者更多地解决方案，而且从整体上对这个问题会有一个感性的认知，而不再是懵懵懂懂的了。</p>
<p>所以在以后的学习或是工作中，建议大家能看英文原版就不要阅读中文翻译版的了，毕竟有些技术名词一翻译成中文，就真的很难理解了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;懵&quot;&gt;&lt;a href=&quot;#懵&quot; class=&quot;headerlink&quot; title=&quot;懵&quot;&gt;&lt;/a&gt;懵&lt;/h2&gt;&lt;p&gt;今年的4月中旬，我在个人PC上面搭建好了Github Pages博客环境，大家也可以看到我的第一篇博客发表时间是在2016年4月21日，但是因为在6
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>基于预线程化的并发服务器</title>
    <link href="http://yoursite.com/2016/09/27/prethreaded-server/"/>
    <id>http://yoursite.com/2016/09/27/prethreaded-server/</id>
    <published>2016-09-27T12:08:29.000Z</published>
    <updated>2016-09-29T04:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>今年暑假读CSAPP第12章并发编程时看到的一个demo</p>
<p>这个demo不但涉及到了服务器的开发，也包括了并发编程和网络编程相关知识</p>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>一个服务器必须能够同时服务两个或两个以上的客户端，为了满足这一要求，有以下几种方案</p>
<ul>
<li>父进程接受监听描述符，子进程处理连接描述符<ul>
<li>父进程accept以后fork一个子进程，父进程接着accept</li>
<li>子进程负责处理这个fd(file descriptor)</li>
<li>代码实现在<a href="http://www.martinbroadhurst.com/source/forked-server.c.html" target="_blank" rel="external">这里</a></li>
</ul>
</li>
<li>通过I/O多路复用技术实现并发<ul>
<li>网络客户端发起连接请求</li>
<li>等待数据到达服务器</li>
<li>代码实现在<a href="http://csapp.cs.cmu.edu/2e/ics2/code/conc/select.chttp://csap.cs.cmu.edu/2e/ics2/code/conc/select.c" target="_blank" rel="external">这里</a></li>
</ul>
</li>
<li>基于多线程实现并发服务器</li>
</ul>
<p>以上3个方案从理论上来说都可以满足一个服务器同时服务多个客户端的需求，但是从工业的角度来讲，都不大现实。拿第一个方案来说，不现实的三个原因如下：</p>
<ul>
<li>每来一个连接就fork一个子进程，开销会很大，在linux系统下，调用fork不会发生地址空间COW(copy on write)，但是会复制父进程的页表。</li>
<li>进程调度器压力过大。当并发量很大时，系统里有很多的进程，那么绝大部分时间将会花在决定哪一个是下一个运行进程以及上下文切换。</li>
<li>内存的消耗。父子进程之间需要IPC，而高并发下的IPC所带来的overhead也不可忽略。</li>
</ul>
<p>将进程换成线程，虽然可以解决fork产生的问题，但是依旧无法处理调度压力和内存开销的麻烦。然而采用固定数量的线程（线程池）是一个非常不错的选择，这就是下面要提到的“预线程并发”模型。</p>
<h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><p>我们使用下图所示的生产者-消费者模型来来降低为每一个新客户端创建一个线程而导致的开销。服务器是由<code>一个主线程</code>和<code>一组工作线程</code>构成的。</p>
<ul>
<li>主线程不断地接受来自客户端的连接请求，并将得到的连接描述符放在一个<code>有限缓冲区</code>中</li>
<li>每一个工作者线程反复地从共享缓冲区中取出描述符来为客户端服务，然后等待下一个fd</li>
</ul>
<img src="/2016/09/27/prethreaded-server/prethreaded_organization.png" alt="The Architecture" title="The Architecture">
<p>为了实现这一目标，我们首先需要开发一个SBUF包，它是用来构造生产者-消费者程序的。SBUF操作类型为sbuf_t的有限缓冲区，SBUF包的头文件如下(sbuf.h)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SBUF_H__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __SBUF_H__</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"csapp.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">/* $begin sbuft */</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">int</span> *buf;          <span class="comment">/* Buffer array */</span>         </div><div class="line">    <span class="keyword">int</span> n;             <span class="comment">/* Maximum number of slots */</span></div><div class="line">    <span class="keyword">int</span> front;         <span class="comment">/* buf[(front+1)%n] is first item */</span></div><div class="line">    <span class="keyword">int</span> rear;          <span class="comment">/* buf[rear%n] is last item */</span></div><div class="line">    <span class="keyword">sem_t</span> mutex;       <span class="comment">/* Protects accesses to buf */</span></div><div class="line">    <span class="keyword">sem_t</span> slots;       <span class="comment">/* Counts available slots */</span></div><div class="line">    <span class="keyword">sem_t</span> items;       <span class="comment">/* Counts available items */</span></div><div class="line">&#125; <span class="keyword">sbuf_t</span>;</div><div class="line"><span class="comment">/* $end sbuft */</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sbuf_init</span><span class="params">(<span class="keyword">sbuf_t</span> *sp, <span class="keyword">int</span> n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sbuf_deinit</span><span class="params">(<span class="keyword">sbuf_t</span> *sp)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sbuf_insert</span><span class="params">(<span class="keyword">sbuf_t</span> *sp, <span class="keyword">int</span> item)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sbuf_remove</span><span class="params">(<span class="keyword">sbuf_t</span> *sp)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __SBUF_H__ */</span></span></div></pre></td></tr></table></figure>
<p>项目存放在一个动态分配的n项整数数组中，front和rear索引值记录该数组中的第一项和最后一项。三个信号量同步对缓冲区的访问，mutex信号量提供互斥的缓冲区访问，slots和items信号量分别记录空槽位和可用项目的数量。</p>
<p>demo的全部代码在<a href="http://csapp.cs.cmu.edu/2e/ics2/code/conc/echoservert_pre.c" target="_blank" rel="external">这里</a>。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>虽说这个demo与之前三种方案相比较已经有了很大的提升，但是在工业中依旧不可使用，因为一个完整的服务器所需要考虑的内容远远不止这些，有兴趣的可以去读读Nginx的代码。其实编写事件驱动程序并不只有I/O多路复用这一种方法，上面这个小demo实际上也是一个事件驱动服务器，带有主线程和工作者线程的简单状态机。</p>
<ul>
<li>主线程有两种状态（“等待连接请求”和“等待可用的缓冲区槽位”）</li>
<li>两个I/O事件（“连接请求到达”和“缓冲区槽位变为可用”）</li>
<li>两个转换（“接受连接请求”和“插入缓冲区项目”）</li>
<li>每个工作者线程有一个状态（“等待可用的缓冲项目”），一个I/O事件（“缓冲区项目可用”）和一个转换（“取出缓冲区项目”）</li>
</ul>
<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><p>关于CS专业，看完书如果不动手其实很难真正理解或者容易遗忘，所以我打算在后续阶段开发一个toyd（玩具式服务器），相对比较完整，支持静态/动态内容，服务器架构采用线程池以及事件驱动和非阻塞I/O。以此来学以致用~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;今年暑假读CSAPP第12章并发编程时看到的一个demo&lt;/p&gt;
&lt;p&gt;这个
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>爬虫系列（1）——解析JS</title>
    <link href="http://yoursite.com/2016/04/21/spider-js/"/>
    <id>http://yoursite.com/2016/04/21/spider-js/</id>
    <published>2016-04-21T13:50:18.000Z</published>
    <updated>2016-09-29T04:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>网络爬虫（Web Crawler）</strong>也叫网络蜘蛛（Web Spider），蚂蚁，自动检索工具，是一种自动浏览网络的程序，也可称为网络机器人。爬虫主要分为两大类：</p>
<ul>
<li><p><strong>广度搜索</strong> ：例如一些著名搜索引擎Google、百度、必应、雅虎等，它们都属于广度搜索爬虫，原理就是每将一个页面所有的链接拿下来后，去遍历所有的链接，再按照上述步骤不断抓取页面直到找到相关的关键词，并按相关度对页面进行排序</p>
</li>
<li><p><strong>垂直搜索</strong> ：简单来说就是抓取特定的数据，如京东上面的所有书籍信息（包括书名、作者、出版社、语种、价格、链接等等），将这些特定数据（也称之为结构化数据）序列化（JSON或XML）之后存储到数据库或者文件里</p>
<pre><code>因为实习期间主要工作就是垂直搜索这块儿，所以在接下来的爬虫系列里，我就垂直搜索爬虫方面的一些难点和新手经常会踩的几个坑做一个简要的总结，既是对自己实习经历的一个回顾加深，也是希望能够帮到即将或者正在踩坑的那些童鞋。
</code></pre></li>
</ul>
<hr>
<h2 id="Ajax-Javascript生成动态信息"><a href="#Ajax-Javascript生成动态信息" class="headerlink" title="Ajax+Javascript生成动态信息"></a>Ajax+Javascript生成动态信息</h2><blockquote>
<p>目前Web前端技术越来越成熟，许多网页不再是简单的静态网页，而是动态网页，这些动态网页中许多信息都是通过Ajax请求从服务端动态获取的，因此要想抓取那些源代码中不包含的信息，就必须通过一些技术手段来得到它们。</p>
</blockquote>
<p>我在分析页面时主要使用Chrome浏览器的F12（开发者工具），很强大，当然也可以使用FireFox浏览器的插件Firebug来分析一个较为复杂的网站或者使用抓包软件如<a href="http://www.telerik.com/fiddler" target="_blank" rel="external">Fiddler</a>。这些工具的使用方法和一些技巧可以自行Google，百度。</p>
<h3 id="方法1：手动解析JS"><a href="#方法1：手动解析JS" class="headerlink" title="方法1：手动解析JS"></a>方法1：手动解析JS</h3><p>这种方法比较耗时同时难度最大，但是一旦分析成功，抓取速度会远远快于方法2，具体原因我会在方法2中说明。下面我会演示一个例子如何去解析动态信息。</p>
<p>拿抓取<a href="http://slide.ent.sina.com.cn/star/w/slide_4_704_137965.html#p=1" target="_blank" rel="external">高圆圆怀抱干女儿</a>这条新浪新闻举个栗子，这条新闻的评论在源代码中是直接拿不到的，其实新浪所有新闻网页都是不能通过网页源码拿到评论内容的，此时就需要我们去分析网络请求并找出评论的来源。</p>
<ol>
<li>得到评论链接</li>
</ol>
<img src="/2016/04/21/spider-js/review.jpg" alt="comments_url" title="comments_url">
<p>打开F12功能后，点击图中数字1 处的“Network”，查看所有请求信息，这其中包括图片和css文件、Img、JS、以及Doc等所有请求的url，通过图中数字2 处的过滤功能，在数字3 处输入”comment”信息，因为要抓取的是评论内容，所以输入的是comment（仅仅是一种基于经验的猜测），当然也可以下拉评论内容，最后在network中发现评论的来源。回车后发现只剩下了3条Type类型均为script的url，每条都试过之后，发现第二条的url可以打开而且页面内容确实是评论信息。</p>
<ol>
<li>分析评论链接<br>根据步骤1，我们得到了评论的链接：<br><a href="http://comment5.news.sina.com.cn/page/info?version=1&amp;format=js&amp;channel=yl&amp;newsid=slidenews-album-704-137965&amp;group=1&amp;compress=1&amp;ie=gbk&amp;oe=gbk&amp;page=1&amp;page_size=100&amp;jsvar=requestId_6363077" target="_blank" rel="external">http://comment5.news.sina.com.cn/page/info?version=1&amp;format=js&amp;channel=yl&amp;newsid=slidenews-album-704-137965&amp;group=1&amp;compress=1&amp;ie=gbk&amp;oe=gbk&amp;page=1&amp;page_size=100&amp;jsvar=requestId_6363077</a><br>可以看到url后面有许多参数，其中比较重要的有:<br><strong>format</strong>: js [也可以写成json，即返回的数据格式]<br><strong>newsid</strong>: slidenews-ablum-704-137965 [新闻id，每条新闻的唯一标识]<br><strong>page</strong>: 1 [评论内容的页码，2，3，4…]<br>即我们只要知道每条新闻的id，就可以通过上面这条url得到每条新闻的所有评论内容，在我将format赋值为json后，得到的评论内容如下：</li>
</ol>
<img src="/2016/04/21/spider-js/comments.jpg" alt="comments_content" title="comments_content">
<p>可以通过上图发现，评论在cmntlist这个列表里，每一条评论的详情又是一个字典，在字典中key为content，对应的value则是评论内容。上图中的json内容之所以能够在浏览器中结构化显示，是因为我使用了一个chrome插件：JSONView。谁用谁知道…</p>
<ol>
<li>小结<br>其实对于有些安全性较高的网站的请求分析起来还是相当复杂和麻烦的，这里的例子比较简单，我也简略了许多内容，所以对于刚刚入手爬虫的同学来说可能还是有点费解的。这些技巧有时候靠直觉和经验，所以只有多多尝试才能掌握这些技能。</li>
</ol>
<h3 id="方法2：用mini浏览器解析JS"><a href="#方法2：用mini浏览器解析JS" class="headerlink" title="方法2：用mini浏览器解析JS"></a>方法2：用mini浏览器解析JS</h3><blockquote>
<p>其实只要技巧熟练，所有关于ajax生成的动态内容都是可以通过方法1获取到的。但是对于刚开始的爬虫新手来说，方法1有一定的门槛，这时就可以通过方法2来操作。目前有很多这样的浏览器引擎，如主要用于自动化测试的<a href="http://www.seleniumhq.org/" target="_blank" rel="external">Selenuim</a>、没有浏览器界面的<a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a>、<a href="http://htmlunit.sourceforge.net/" target="_blank" rel="external">HtmlUnit</a> 以及<a href="http://casperjs.org/" target="_blank" rel="external">CasperJS</a>，也有很多基于webkit的其他浏览器引擎，也就是说我们可以用这些引擎来渲染js，最后生成DOM树对元素进行操控，但是模拟浏览器环境内存和CPU消耗都非常严重，因此抓取效率将大打折扣。</p>
</blockquote>
<p>下面的一段python代码则是用方法2的应用(基于PhantomJS)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getjsContent</span><span class="params">(url, xpath_exp)</span>:</span></div><div class="line">	service_args = [</div><div class="line">		<span class="string">'--load-images=false'</span>,</div><div class="line">		<span class="string">'--disk-cache=true'</span>,</div><div class="line">	]</div><div class="line">	url = <span class="string">"http://disqus.com/embed/comments/?base=default&amp;\</span></div><div class="line">		version=208e70781fad1709ad376036d91294bc&amp;\</div><div class="line">		f=fattoquotidiano&amp;t_i=2592376"</div><div class="line">	dr  = webdriver.PhantomJS(<span class="string">'/usr/bin/phantomjs'</span>,service_args=service_args)</div><div class="line">	dr.get(url)</div><div class="line">	dr.execute_script(<span class="string">"window.scrollTo(0, document.body.scrollHeight);"</span>)</div><div class="line">	<span class="keyword">try</span>:</div><div class="line">		<span class="comment"># print dr.page_source</span></div><div class="line">		element = WebDriverWait(dr, <span class="number">2</span>).until(</div><div class="line">			EC.presence_of_element_located((By.XPATH, xpath_exp))</div><div class="line">		<span class="keyword">print</span> element.text</div><div class="line">	<span class="keyword">finally</span>:</div><div class="line">		dr.quit()</div></pre></td></tr></table></figure></p>
<p>上述代码中用到了<em>xpath</em>，后续章节会讲到。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><table>
<thead>
<tr>
<th style="text-align:center">method</th>
<th style="text-align:center">strength</th>
<th style="text-align:center">weakness</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">方法1</td>
<td style="text-align:center">无需render、高效、抓取速度快</td>
<td style="text-align:center">较为复杂、需要仔细分析页面</td>
</tr>
<tr>
<td style="text-align:center">方法2</td>
<td style="text-align:center">傻瓜式解决、无需分析请求</td>
<td style="text-align:center">消耗cpu和内存、渲染js,css、速度慢</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;网络爬虫（Web Crawler）&lt;/strong&gt;也叫网络蜘蛛（Web Spider），蚂蚁，自动检索工具，是一种自动浏览网络的程序，也可称为网络机器人。爬虫主要分为两大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;广度搜索&lt;/strong&gt; ：例
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Excel打开csv文件乱码的解决办法</title>
    <link href="http://yoursite.com/2016/04/21/excel_csv/"/>
    <id>http://yoursite.com/2016/04/21/excel_csv/</id>
    <published>2016-04-21T03:40:01.000Z</published>
    <updated>2016-09-29T04:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><blockquote>
<p>今天在用excel打开一个脚本生成的csv文件（存储编码格式为utf-8）时出现了乱码情况，但是用WPS直接打开却正常显示。因为文件是要交给客户的，office又是普遍使用的一枚办公软件，总不能让客户去安装一个WPS吧。网上一番查阅后，众说纷纭，因此特此记录下自己所踩过的坑：</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>用记事本打开csv文件，另存为Unicode格式</li>
<li>之后用excel打开CSV文件，注意此时该文件的编码已是Unicode</li>
<li>若出现每一行所有字段在一个单元格的情况，解决步骤接着看下面</li>
<li>重新打开excel，执行”数据”-&gt;”自文本”-&gt;选择csv文件-&gt;”导入”-&gt;出现文本导入导向对话框-&gt;”下一步”-&gt;取消Tab键，选中逗号作为分隔符号-&gt;”确定”</li>
<li>待转换成功，则会在excel中正常显示</li>
</ul>
<hr>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><pre><code>Excel默认打开文件的编码格式是Unicode，所以当文件里面同时含有中文、韩文、西欧字符等等的时候，此时若文件为非Unicode格式，由于编码格式不一致，将会出现乱码问题。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;产生背景&quot;&gt;&lt;a href=&quot;#产生背景&quot; class=&quot;headerlink&quot; title=&quot;产生背景&quot;&gt;&lt;/a&gt;产生背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天在用excel打开一个脚本生成的csv文件（存储编码格式为utf-8）时出现了乱码情况，但是用
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="excel" scheme="http://yoursite.com/tags/excel/"/>
    
      <category term="csv" scheme="http://yoursite.com/tags/csv/"/>
    
  </entry>
  
</feed>
